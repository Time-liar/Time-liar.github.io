<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>练习题样例</title>
      <link href="post/3235466581.html"/>
      <url>post/3235466581.html</url>
      
        <content type="html"><![CDATA[<div class="note primary"><p>本文作者： Ruri Shimotsuki @優萌初華<br>本文参考链接： <a href="https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/special/">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/special/</a></p></div><ol><li class="quiz true"><p>编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。</p></li><li class="quiz multi"><p>有基类  <code>SHAPE</code> ，派生类  <code>CIRCLE</code> ，声明如下变量： </p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">SHAPE shape1<span class="token punctuation">,</span><span class="token operator">*</span>p1<span class="token punctuation">;</span>CIRCLE circle1<span class="token punctuation">,</span><span class="token operator">*</span>q1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下列哪些项是 “派生类对象替换基类对象”。</p><ul class="options"><li class="correct"><code>p1=&amp;circle1;</code> </li><li><code>q1=&amp;shape1;</code></li><li class="correct"><code>shape1=circle1;</code> </li><li><code>circle1=shape1;</code></li></ul><blockquote><ul class="options"><li>✔️ 令基类对象的指针指向派生类对象</li><li>❌ 派生类指针指向基类的引用</li><li>✔️ 派生类对象给基类对象赋值</li><li>❌ 基类对象给派生类对象赋值</li></ul></blockquote></li><li class="quiz"><p>下列叙述正确的是 <span class="gap"></span> 。</p><ul class="options"><li>虚函数只能定义成无参函数</li><li>虚函数不能有返回值</li><li>能定义虚构造函数</li><li class="correct">A、B、C 都不对</li></ul></li><li class="quiz fill"><p>如果定义  <code>int e=8; double f=6.4, g=8.9;</code> ，则表达式  <code>f+int (e/3*int (f+g)/2)%4</code>  的值为 <span class="gap">9.4</span>。</p><blockquote><p>注意运算顺序和数据类型<br><span class="mistake"> 8.4</span></p></blockquote></li></ol><p><ins>下划线</ins><br><ins class="wavy">波浪线</ins><br><ins class="dot">着重点</ins><br><ins class="primary">紫色下划线</ins><br><ins class="wavy success">绿色波浪线</ins><br><ins class="dot warning">黄色着重点</ins><br><s>删除线</s><br><s class="danger">红色删除线</s><br><mark>荧光高亮</mark><br><span class="rainbow">赤橙黄绿青蓝紫</span><br><span class="red">红色</span><br><span class="pink">粉色</span><br><span class="orange">橙色</span><br><span class="yellow">红色</span><br><span class="green">绿色</span><br><span class="aqua">靛青</span><br><span class="blue">蓝色</span><br><span class="purple">紫色</span><br><span class="grey">灰色</span><br>快捷键 <span class="kbd">Ctrl</span> + <span class="kbd red">C</span><br>H<sub>2</sub>0<br>29<sup>th</sup></p><p><span class="spoiler">黑色的</span></p><div class="note primary"><p>占位</p></div><div class="note info"><p>占位</p></div><div class="note danger"><p>占位</p></div><p><ruby>常用账号<rp>【</rp><rt>chang  yong  zhang  hao</rt><rp>】</rp></ruby></p>]]></content>
      
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试基本样式</title>
      <link href="post/2600766277.html"/>
      <url>post/2600766277.html</url>
      
        <content type="html"><![CDATA[<p>主题开发过程中测试 Markdown 解析后效果专用文档</p><span id="more"></span><h1>标题测试</h1><h2>二标题</h2><h3>三标题</h3><h4>四标题</h4><h5>⑤标题</h5><h6>⑥标题超长测试标题超长测试标题超长测试标题超长测试标题超长测试标题超长测试</h6><h1>引用测试</h1><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></blockquote><h1>代码块测试</h1><h2>Java</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代码块测试"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2>HTML</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>has-navbar-fixed-top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container mt-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>columns is-flex-direction-row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column is-three-quarters is-justify-content-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>普通文本测试</h1><h2>粗体</h2><p><strong>这是粗体文字</strong>，混合在正常文本内</p><h2>斜体</h2><p><em>这是斜体文字</em>，混合在正常文本内</p><h2>删除线</h2><p><sub>这是删除文字</sub>，混合在正常文本内</p><h2>下划线</h2><p><u>这是下划线文字</u>，混合在正常文本内</p><h2>内嵌代码块</h2><p>内部的 <code>代码</code> 片段</p><h1>多媒体</h1><h2>普通链接</h2><p><a href="https://hexo.io">Hexo</a></p><h2>图片</h2><p><img src="https://resource.frida.wang/IMG_20170812_094946.jpg" alt="图片描述"></p><h2>视频</h2><video id="video" controls="" preload="none"><source id="mp4" src="http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4" type="video/mp4"></video><h1>表格</h1><table><thead><tr><th>第一列</th><th>第二列</th></tr></thead><tbody><tr><td>第一行第一列</td><td>第一行第二列</td></tr><tr><td>第二行第一列</td><td>第二行第二列</td></tr><tr><td>第三行第一列</td><td>第三行第二列</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主题开发（Ginkgo）</title>
      <link href="post/3263736420.html"/>
      <url>post/3263736420.html</url>
      
        <content type="html"><![CDATA[<p>经历了诸多岁月和诸多 Hexo 主题尝试以后，决定自己开发一版简洁的，能实现基本功能的 Hexo 主题，作为一个折腾的小目标，让博客写作过程完全可控（指不用折腾主题配置）。<br>作为一个常年后端搬砖工，前端满足于能看能点就 OK，不用去强求炫酷的特效和强大的功能。</p><span id="more"></span><h2>持续更新</h2><p>主题功能列表</p><ul class="task-list"><li class="task-list-item"><input type="checkbox" id="cbx_0" checked="true" disabled="true"><label for="cbx_0"> 基本的页面框架</label></li><li class="task-list-item"><input type="checkbox" id="cbx_1" checked="true" disabled="true"><label for="cbx_1"> 页面自适应</label></li><li class="task-list-item"><input type="checkbox" id="cbx_2" checked="true" disabled="true"><label for="cbx_2"> post 支持多种标签扩展（缝合了<a href="https://github.com/amehime/hexo-theme-shoka"> Shoka</a> 主题的一些基本功能，包括练习题等）</label></li><li class="task-list-item"><input type="checkbox" id="cbx_3" checked="true" disabled="true"><label for="cbx_3"> 评论系统</label></li><li class="task-list-item"><input type="checkbox" id="cbx_4" disabled="true"><label for="cbx_4"> Tag 和 Category 管理（页面和样式需要重构）</label></li><li class="task-list-item"><input type="checkbox" id="cbx_5" disabled="true"><label for="cbx_5"> 信息密度比较高的 about 页面</label></li><li class="task-list-item"><input type="checkbox" id="cbx_6" disabled="true"><label for="cbx_6"> 搜索功能</label></li></ul><h2>第〇步，使用其他人的主题</h2><p>使用时间最长的主题是 <a href="https://github.com/viosey">viosey</a> 大佬的 <a href="https://github.com/viosey/hexo-theme-material">hexo-theme-material</a>，折腾一段时间后使用感觉良好，但对 MaterialDesign 渐渐审美疲劳。<br>目前是用的主题是<a href="https://github.com/blinkfox/hexo-theme-matery"> hexo-theme-matery</a>，虽然大框架也是 materialDesign<span class="spoiler">（真香）</span>，github 上 fork 后进行了轻微的魔改，保留了一些基本功能。</p><h2>第一步，Hexo 基础</h2><h3>文档</h3><p>Hexo 官方提供了一个比较详细的指引文档，<a href="https://hexo.io/zh-cn/docs">https://hexo.io/zh-cn/docs</a> ，重点是关于 <code>链接定义</code> ， <code>变量</code> 部分的内容，hexo 的主要流程就是把 Markdown 根据主题内定义的方式生成指定的 HTML，主题的核心部分即为 HTML 的模板文件（ejs 等），最基础的是把 Markdown 中的内容显示出来，然后进行 UI 的优化，让页面更好看，最后可以适当集成部分功能，如评论、打点等。</p><h3>主题基础结构</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── README.md├── _config.yml <span class="token comment"># 主题配置文件</span>├── languages  <span class="token comment"># i18n语言目录，定义本地化展示语言，在模板中通过__('key')调用</span>│   ├── default.yml│   └── zh-CN.yml├── layout  <span class="token comment"># 主题结构目录，存放各个页面模板文件</span>│   ├── _partial│   │   ├── aside.ejs│   │   ├── footer.ejs│   │   ├── head.ejs│   │   └── header.ejs│   ├── archive.ejs│   ├── index.ejs│   ├── layout.ejs│   ├── links.ejs│   └── post.ejs├── package.json├── scripts   <span class="token comment"># 脚本目录，是hexo构建过程中是用的脚本，而不是构建完成后页面是用的js脚本目录</span>│   ├── helper.js│   └── lib│       ├── bulma_paginator.js│       └── bulma_toc.js└── <span class="token builtin class-name">source</span>  <span class="token comment"># 资源文件，构建完成后页面使用的css/js等，不会参与hexo构建，会原样复制到构建完成目录中</span>    └── css        ├── bulma-timeline.min.css        └── custom.css<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2>第二步，UI 样式确定</h2><p>Hexo 文档通读一遍后，确定好主题目录的基本结构，然后就开始进行 UI 的设计，目前现成的开源 UI 组件类型丰富，可供选择的很多，基于从简的原则，最基本的 css 组件即可满足要求，经过多方比较，最后选择了<a href="https://bulma.io/"> bulma</a> 作为主题的基本 UI 框架。只要掌握一些基本的 css 知识就可以进行学习使用，无需特别高的前端开发能力。</p><h2>第三步，开发</h2><p>主题重点开发的几个页面为</p><ol><li><code>index</code> ：主页内容</li><li><code>archive</code> ：归档页面内容（tags,categories 也会使用该页面)</li><li><code>post</code> ：文章详细内容页</li></ol><p>页面主体模板为 <code>layout.ejs</code> ，用以确定整个页面的结构，包括一些公共组件的集成（基础 css），页面框架定义等。</p><p>页面模板采用 ejs 引擎渲染，标记为 <code>&lt;% %&gt;</code> ，<a href="https://ejs.bootcss.com/">文档</a>，可以通过 <code>&lt;% partial('页面文件名称') %&gt;</code>  来进行 import 组合</p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx在Linux下的安装</title>
      <link href="post/2175012096.html"/>
      <url>post/2175012096.html</url>
      
        <content type="html"><![CDATA[<p>本文使用的环境是 Ubuntu 17.10，其他发行版对于本文中的操作并没有什么影响</p><span id="more"></span><h2>Nginx 安装 （具体版本按需选择）</h2><h3>基础源码包下载</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token string">"https://nginx.org/download/nginx-1.13.5.tar.gz"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><small>养成 <code>wget</code>  加引号的习惯，可避免很多问题</small></p><h3>基础依赖包 zlib &amp; pcre</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token string">"ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.41.zip"</span><span class="token function">wget</span> <span class="token string">"http://nginx.org/download/zlib-1.2.11.tar.gz"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>PCRE 用来支持 rewrite 模块</p><h2>模块选择（可选）</h2><h3>Fancy Index （基本不需要）</h3><p>该模块是使用 Nginx 作为文件服务器时美化目录索引用，按兴趣加</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/aperezdc/ngx-fancyindex.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>待编译时用</p><h3>LuaJIT （比较重要）</h3><p>LuaJIT 是 C 写成的 Lua 解释器，速度比 Lua 解释器快十倍左右，JIT 名词解释见维基百科<a href="https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%99%82%E7%B7%A8%E8%AD%AF">传送门</a><br>官方安装方式 <a href="https://github.com/openresty/lua-nginx-module#installation">传送门</a></p><h4>本地先安装 LuaJIT</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token string">"http://luajit.org/download/LuaJIT-2.0.5.tar.gz"</span><span class="token function">wget</span> <span class="token string">"https://github.com/openresty/lua-nginx-module/archive/v0.10.10.zip"</span> -O lua-nginx-module-0.10.10.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>先构建 LuaJIT，<a href="https://asciinema.org/a/136488">视频传送门</a><br>然后等待 Nginx 构建</p><h2>构建</h2><p>实现需要安装 gcc,g++,make，否则无编译器<br>先配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure <span class="token punctuation">\</span>    --with-http_ssl_module <span class="token punctuation">\</span> <span class="token comment">## 需要事先安装openssl,否则需要指定ssl源码目录  </span>    --with-pcre<span class="token operator">=</span><span class="token punctuation">..</span>/pcre-8.41 <span class="token punctuation">\</span>    --with-zlib<span class="token operator">=</span><span class="token punctuation">..</span>/zlib-1.2.11 <span class="token punctuation">\</span>    --add-module<span class="token operator">=</span><span class="token punctuation">..</span>/ngx-fancyindex <span class="token punctuation">\</span>  <span class="token comment">## 可选插件</span>    --sbin-path<span class="token operator">=</span>/usr/local/nginx/nginx <span class="token punctuation">\</span>    --conf-path<span class="token operator">=</span>/etc/nginx/nginx.conf <span class="token punctuation">\</span>  <span class="token comment">## 指定配置文件位置，默认为nginx所在目录</span>    --pid-path<span class="token operator">=</span>/usr/local/nginx/nginx.pid <span class="token punctuation">\</span>    --add-module<span class="token operator">=</span>/data/src/lua-nginx-module-0.10.10 <span class="token comment">## lua模块</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其中的各种 path 请自己指定</strong><br>执行以上过程检查是否有错误，有错误请请教 Google 和 StackOverflow<br> 若无错误，即可开始构建</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构建完成直接使用 <code>nginx</code>  来运行 nginx，如果出现 <code>command not found</code>  ，可用 <code>ln -s /path/to/nginx/nginx /sbin/</code>  将 nginx 软链到 sbin 下</p><h2>验证</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现 200 则安装成功</p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于匿名内部类的坑</title>
      <link href="post/985142654.html"/>
      <url>post/985142654.html</url>
      
        <content type="html"><![CDATA[<h1>起因</h1><p>有一种初始化方法，写起来很爽，比如这样：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#123;</span>    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"timeliar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"timeliar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><p><strong>这种写法千万注意，会造成内存泄露，原因以下再说</strong></p><p>然而这种写法有坑，坑来自 Java 基础的不扎实。<br>原本天真的以为，这种写法是直接初始化一个类，然后直接调用对象的方法。<br>但是用反射提取字段信息的时候，出现了问题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">BarUserLink</span> link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BarUserLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span>            <span class="token function">setBarId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">BarUserLink</span> link1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BarUserLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    link<span class="token punctuation">.</span><span class="token function">setBarId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    link<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类反射取字段"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ==> "</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正常new对象反射取字段"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fields <span class="token operator">=</span> link1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ==> "</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">匿名内部类反射取字段this$0 &#x3D;&#x3D;&gt; date.timeliar.graduation.web.TestQuickInit@27abe2cd正常new对象反射取字段barId &#x3D;&#x3D;&gt; 1userId &#x3D;&#x3D;&gt; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>解释</h1><p>查阅了相关资料 (主要是 Google) 之后，尝试得出一个结论，这种写法返回的其实是一个继承了该类的匿名内部类，<br>实验检验：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">innerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">BarUserLink</span> link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BarUserLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this -> "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"super -> "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">this</span> <span class="token operator">-></span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">date<span class="token punctuation">.</span>timeliar<span class="token punctuation">.</span>graduation<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span>TestQuickInit</span>$<span class="token number">4</span><span class="token keyword">super</span> <span class="token operator">-></span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">date<span class="token punctuation">.</span>timeliar<span class="token punctuation">.</span>graduation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>model<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span>BarUserLink</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>真相大白，初始化的时候两个大括号的意义也明了了，外部括号是定义了类边界，内部的是普通代码块，作为作用域。</p><p><strong>因为是内部类，所以返回出对象之后，如果该对象被一直使用，那么外部类的对象将不会被会回收，这就造成了内存泄露</strong><br><strong>返回的本质是一个继承了所需要类的内部类，虽然是子类，但是并不能代表父类的一切，比如反射取字段的时候</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Let&#39;s Encrypt签署免费SSL证书</title>
      <link href="post/1223633752.html"/>
      <url>post/1223633752.html</url>
      
        <content type="html"><![CDATA[<p>本文操作在 Linux 操作系统下完成，需要 Python 和 Nginx</p><span id="more"></span><blockquote><p>超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为 HTTP over TLS，HTTP over SSL 或 HTTP Secure）是一种网络安全传输协议。在计算机网络上，HTTPS 经由超文本传输协议进行通信，但利用 SSL/TLS 来加密数据包。HTTPS 开发的主要目的，是提供对网络服务器的身份认证，保护交换数据的隐私与完整性。这个协议由网景公司（Netscape）在 1994 年首次提出，随后扩展到互联网上。<br>HTTPS 连接经常用于万维网上的交易支付和企业信息系统中敏感信息的传输。HTTPS 不应与在 RFC 2660 中定义的安全超文本传输协议（S-HTTP）相混淆。</p></blockquote><p>以上引用自维基百科关于<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE"> Https</a> 的解释<br>关于 Https 的详细信息网上都有，请查阅<a href="https://zh.wikipedia.org">维基百科</a>和<a href="https://www.google.com"> Google</a></p><p>本文签发 Https 证书的机构为<a href="https://letsencrypt.org/"> Let’s Encrypt</a> (以下简称为 LE), 该组织旨在消除当前手动创建和安装证书的复杂过程的自动化流程，为安全网站提供免费的 SSL/TLS 证书。</p><h2>流程开始</h2><h3>注册 Let’s Encrypt 账户 (account.key)</h3><p>account.key 为 LE 用来识别你身份 (相当于账户) 的 RSA key，使用 <code>openssl</code>  生成</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl genrsa <span class="token number">4096</span> <span class="token operator">></span> account.key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3>创建 CSR 文件</h3><p>LE 和<a href="https://github.com/ietf-wg-acme/acme/"> ACME 协议</a>旨在配置一个自动化的，不需要人为干涉<br>即可以获得浏览器信任证书的 Https 服务器，该功能是通过服务器上运行一个证书管理代理程序 (Certificate Management Agent) 来实现的，该程序首先需要一个域名的<a href="https://en.wikipedia.org/wiki/Certificate_signing_request">证书签名请求文件 (Certificate Signing Request, CSR)</a>，然后将该文件递交给 LE 进行签发。<br>首先生成 <code>domain.key</code>  文件来作为域名的身份凭证</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl genrsa <span class="token number">4096</span> <span class="token operator">></span> domain.key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>切记不可使用 account.key 来作为 domain.key</strong><br>然后生成 CSR 文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl req -new -sha256 -key domain.key -subj <span class="token string">"/"</span> -reqexts SAN -config <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">cat</span> /etc/ssl/openssl.cnf <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token builtin class-name">printf</span> <span class="token string">"[SAN]<span class="token entity" title="\n">\n</span>subjectAltName=DNS:&#123;domain1&#125;,DNS:&#123;domain2&#125;"</span><span class="token punctuation">))</span> <span class="token operator">></span> domain.csr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将 {domain1},{domain2} 替换成自己的域名即可，比如 <code>timeliar.date</code> , <code>blog.timeliar.date</code> ，可添加多个，以逗号分隔，写成 <code>DNS:domain</code>  的格式即可。<br><small>提示 /etc/ssl/openssl.cnf 找不到的话请自行 google:can not open /etc/ssl/openssl.cnf，路径有可能是 /usr/local/ssl/openssl.cnf，这个取决于 openssl 是如何安装的</small></p><h3>认证</h3><p>LE 想给你域名签发证书首先得确定域名可用，并且域名是你的。</p><ul><li><p>首先创建一个写入临时文件的目录，如 <code>/var/www/le</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /var/www/le<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改 Nginx 配置文件，添加一个 virtual server</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>  <span class="token keyword">location</span> <span class="token operator">^</span><span class="token operator">~</span> <span class="token operator">/</span><span class="token punctuation">.</span>well<span class="token operator">-</span>known<span class="token operator">/</span>acme<span class="token operator">-</span>challenge<span class="token operator">/</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">alias</span> <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>le<span class="token operator">/</span><span class="token punctuation">;</span>        <span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token operator">=</span><span class="token number">404</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>path  <code>/.well-known/acme-challenge/</code>  为 LE 固定访问 URI，请不要修改</p></li><li><p>启动 nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>开始认证</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python acme_tiny.py <span class="token punctuation">\</span>        --account-key account.key <span class="token punctuation">\</span>        --csr domain.csr <span class="token punctuation">\</span>        --acme-dir /var/www/le/ <span class="token operator">></span> <span class="token punctuation">\</span>        signed.crt<span class="token comment"># 获取LE中见证书</span><span class="token function">wget</span> -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem <span class="token operator">></span> intermediate.pem<span class="token comment"># 将le的中间证书和生成的证书组合成证书链</span><span class="token function">cat</span> ./signed.crt ./intermediate.pem <span class="token operator">></span> ./chained.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>** 认证过程中 py 脚本会对提供的本机目录 <code>/var/www/le</code>  里写文件，然后通过访问 <code>&#123;domain&#125;/.well-known/acme-challenge/&#123;文件名&#125;</code>  来校验域名是否可用 **</p></li></ul><h3>生成 dhparam</h3><p>前段时间 Google 完成了 SHA-1 的碰撞实验 (<a href="http://www.infoq.com/cn/news/2017/02/google-first-sha1-collision">Google 宣布攻破 SHA-1，从此 SHA-1 不再安全</a>)，是时候该抛弃 SHA-1 了，这里使用了<a href="https://zh.wikipedia.org/wiki/%E8%BF%AA%E8%8F%B2-%E8%B5%AB%E7%88%BE%E6%9B%BC%E5%AF%86%E9%91%B0%E4%BA%A4%E6%8F%9B">迪菲 - 赫尔曼密钥交换</a>协议，具体讲解请看 wikipedia</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl dhparam -out dhparam.pem <span class="token number">2048</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3>配置 Nginx</h3><p>将生成的 <code>chained.pem</code>  配置到 Nginx 中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssl on<span class="token punctuation">;</span>ssl_certificate /path/to/chained.pem<span class="token punctuation">;</span>ssl_certificate_key /path/to/domain.key<span class="token punctuation">;</span>ssl_dhparam /path/to/dhparam.pem<span class="token punctuation">;</span>ssl_ciphers <span class="token string">'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA'</span><span class="token punctuation">;</span>ssl_prefer_server_ciphers  on<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后开始使用吧！<br>但是出于安全考虑，该证书有效期只有 90 天，到期之后只需要再次进行认证即可，将下列脚本加入 <code>crontab</code> ，90 天运行一次</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python acme_tiny.py <span class="token punctuation">\</span>        --account-key account.key <span class="token punctuation">\</span>        --csr domain.csr <span class="token punctuation">\</span>        --acme-dir /var/www/le/ <span class="token operator">></span> <span class="token punctuation">\</span>        signed.crt<span class="token function">cat</span> ./signed.crt ./intermediate.pem <span class="token operator">></span> ./chained.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2>此外还有一些著名付费 Https 证书签发机构</h2><p>免费的证书认证级别还是还是比较低的，只能起到加密信息的作用，适合做个人网站博客等安全要求不是特别高的。电商站点还是得用认证级别更高的付费证书来防止钓鱼网站</p><ul><li>自行 Google 吧</li></ul>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恨恨而死</title>
      <link href="post/1953432701.html"/>
      <url>post/1953432701.html</url>
      
        <content type="html"><![CDATA[<h1>恨恨而死</h1><p><code>作者：鲁迅</code></p><p>古来很有几位恨恨而死的人物。他们一面说些 “怀才不遇”“天道宁论” 的话，一面有钱的便狂嫖滥赌，没钱的便喝几十碗酒，—— 因为不平的缘故，于是后来就恨恨而死了。</p><span id="more"></span><p>我们应该趁他们活着的时候问他：诸公！您知道北京离昆仑山几里，弱水去黄河几丈么？火药除了做鞭爆，罗盘除了看风水，还有什么用处么？棉花是红的还是白的？谷子是长在树上，还是长在草上？桑间濮上如何情形，自由恋爱怎样态度？您在半夜里可忽然觉得有些羞，清早上可居然有点悔么？四斤的担，您能挑么？三里的道，您能跑么？</p><p>他们如果细细的想，慢慢的悔了，这便很有些希望。万一越发不平，越发愤怒，那便 “爱莫能助”。—— 于是他们终于恨恨而死了。</p><p>中国现在的人心中，不平和愤恨的分子太多了。不平还是改造的引线，但必须先改造了自己，再改造社会，改造世界；万不可单是不平。至于愤恨，却几乎全无用处。</p><p>愤恨只是恨恨而死的根苗，古人有过许多，我们不要蹈他们的覆辙。</p><p>我们更不要借了 “天下无公理，无人道” 这些话，遮盖自暴自弃的行为，自称 “恨人”，一副恨恨而死的脸孔，其实并不恨恨而死。</p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下修改swap扩展内存</title>
      <link href="post/1409658818.html"/>
      <url>post/1409658818.html</url>
      
        <content type="html"><![CDATA[<p>刚入了一台<a href="https://www.digitalocean.com/"> digital ocean</a> 的 VPS，1 核 1G,30G+SSD 只要 10$, 遂在上面跑了一个 gitlab，作为个人 git 仓库，然而启动后出现了 502，已检查发现内存不够，原来默认没有分 swap（好坑），手动添加一下吧</p><span id="more"></span><h2>查看 swap 分区占用情况</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /proc/meminfo <span class="token operator">|</span> <span class="token function">grep</span> SwapSwapCached:            <span class="token number">0</span> kBSwapTotal:             <span class="token number">0</span> kBSwapFree:              <span class="token number">0</span> kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时 Swap 分区为空</p><h2>查看系统还有多少空间</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">df</span> -lhFilesystem      Size  Used Avail Use% Mounted on/dev/vda1        30G  <span class="token number">1</span>.8G   27G   <span class="token number">7</span>% /none            <span class="token number">4</span>.0K     <span class="token number">0</span>  <span class="token number">4</span>.0K   <span class="token number">0</span>% /sys/fs/cgroupudev            493M  <span class="token number">4</span>.0K  493M   <span class="token number">1</span>% /devtmpfs           100M  316K  100M   <span class="token number">1</span>% /runnone            <span class="token number">5</span>.0M     <span class="token number">0</span>  <span class="token number">5</span>.0M   <span class="token number">0</span>% /run/locknone            498M   24K  497M   <span class="token number">1</span>% /run/shmnone            100M     <span class="token number">0</span>  100M   <span class="token number">0</span>% /run/user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时 <code>/</code>  目录还有 27G，可以分</p><h2>创建 Swap 文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>/swap.disk <span class="token assign-left variable">bs</span><span class="token operator">=</span>1m <span class="token assign-left variable">count</span><span class="token operator">=</span>2k<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>([/dev/zero][1]) 或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> fallocate -l 2G /swap.disk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>([fallocate][2]) <a href="http://man.he.net/?topic=fallocate&amp;section=all">man page</a><br> 此时根目录下生成 swap.disk，可设置 <code>chmod 600 /swap.disk</code>  使 swap 只能 root 可读写，保证读写安全</p><h2>设置 Swap</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">mkswap</span> /swap.diskSetting up swapspace version <span class="token number">1</span>, size <span class="token operator">=</span> <span class="token number">2097148</span> KiBno label, <span class="token assign-left variable">UUID</span><span class="token operator">=</span>1ba86321-c49d-434c-8c52-741173fb5eab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2>启动 Swap</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">swapon</span> /swap.disk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在查看内存用量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /proc/meminfo <span class="token operator">|</span> <span class="token function">grep</span> SwapSwapCached:            <span class="token number">0</span> kBSwapTotal:       <span class="token number">2097148</span> kBSwapFree:        <span class="token number">2097148</span> kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>已有 Swap 数据</p><h2>设置重启不失效</h2><p>上述方法在系统重启后 swap 会自动不挂载，设置方法为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">"/swap.disk   none    swap    sw    0   0"</span> <span class="token operator">>></span> /etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2>其他操作</h2><h3>设置 Swap 用量</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">"vm.vfs_cache_pressure = 50"</span> <span class="token operator">>></span> /etc/sysctl.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了不重启生效，则</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ sysctl vm.swappiness<span class="token operator">=</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[1]: javascript:void (0)“在类 UNI 操作系统中，/dev/zero 是一个特殊的文件，当你读它的时候，它会提供无限的空字符 (NULL,ASCII,NUL,0x00) 其中的一个典型用法是用它提供的字符流来覆盖信息，另一个常见用法是产生一个特定大小的空白文件。BSD 就是通过 mmap 把 /dev/zero 映射到虚地址空间实现共享内存的。可以使用 mmap 将 /dev/zero 映射到一个虚拟的内存空间，这个操作的效果等同于使用一段匿名的内存（没有和任何文件相关）。”<br>[2]: javascript:void (0)“dd 指令为实际写入硬盘，文件产生速度取决于硬盘读写速度，如果欲产生超大文件，速度很慢如果想让系统认为这里存在一个大文件，而不用具体将空字符写入此处磁盘，则可以使用 fallocate，但 Docker 中该指令失效”</p>]]></content>
      
      
      <categories>
          
          <category> 备忘录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS顺序插入数组</title>
      <link href="post/1411920408.html"/>
      <url>post/1411920408.html</url>
      
        <content type="html"><![CDATA[<p>给一个数组和一个数字，将数字插入数字指定位置，使数组有序，不使用遍历</p><span id="more"></span><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> right <span class="token operator">=</span> array<span class="token punctuation">.</span>length    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> array<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            right <span class="token operator">=</span> middle<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            left <span class="token operator">=</span> middle<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">+</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>middle<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 136. Single Number</title>
      <link href="post/3117013983.html"/>
      <url>post/3117013983.html</url>
      
        <content type="html"><![CDATA[<p>Given an array of integers, every element appears <em>twice</em> except for one. Find that single one.</p><p>大意为给定一个整数数组，数组中除了一个元素只有一个外，其他元素均出现两次，找出一个的这个元素</p><span id="more"></span><h2>思路</h2><p>最初想法将数组每个数扫描进一个集合，没扫进一个元素判断集合中是否已存在，存在则删除集合中的相应元素，否则将元素添加进集合，最后集合中剩下的那个元素则为单个元素</p><h2>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2>优化</h2><p>上面的方法虽然能通过测试，但是数据量一大所需内存会很大，运行时间也很慢，所以根据异或运算的规律做出了优化方案</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">planB</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> single <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        single <span class="token operator">^=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> single<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 338. Counting Bits</title>
      <link href="post/3798892992.html"/>
      <url>post/3798892992.html</url>
      
        <content type="html"><![CDATA[<p>Given a non negative integer number <strong>num</strong>. For every numbers <strong>i</strong> in the range <strong>0 ≤ i ≤ num</strong> calculate the number of 1’s in their binary representation and return them as an array.</p><p>大意为在给定的一个数字，求对于每一个小于这个数字的非负整数的二进制形式中有多少 1。</p><span id="more"></span><h2>思路</h2><p>在二进制运算中有一个基本但是神奇的运算 <code>&amp;</code> ，与运算的原则是同为 1 相与则为 1，一旦有 0 相与则为 0，</p><p>因此在位运算中有一个神奇的规律，当一个正整数数 x 与 (x-1) 相与时，x 二进制中的最右端的 1 则会消去</p><p>如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">010010101</span><span class="token operator">&amp;</span><span class="token number">010010100</span><span class="token operator">=</span><span class="token number">010010100</span><span class="token number">010100100</span><span class="token operator">&amp;</span><span class="token number">010100011</span><span class="token operator">=</span><span class="token number">010100000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此规律可知，当一个数 x 与 (x-1) 相与多次，直到结果为 0，则相与次数则为 x 二进制中 1 的个数</p><h2>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tmp <span class="token operator">=</span> tmp <span class="token operator">&amp;</span> <span class="token punctuation">(</span>tmp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于异或^</title>
      <link href="post/1735509685.html"/>
      <url>post/1735509685.html</url>
      
        <content type="html"><![CDATA[<p>异或为相同为 0 相异为 1</p><span id="more"></span><h2>例子</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">010101</span><span class="token operator">^</span><span class="token number">001011</span><span class="token operator">=</span><span class="token number">011110</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2>规则</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">a <span class="token operator">^</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>幂a <span class="token operator">^</span> b <span class="token operator">=</span> b <span class="token operator">^</span> a<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>交换a <span class="token operator">^</span> <span class="token number">0</span> <span class="token operator">=</span> a<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>与<span class="token number">0</span>异或a <span class="token operator">^</span> b <span class="token operator">^</span> c <span class="token operator">=</span> a <span class="token operator">^</span> <span class="token punctuation">(</span>b <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>结合<span class="token punctuation">(</span>a <span class="token operator">^</span> b <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">^</span> c <span class="token operator">=</span> a <span class="token operator">^</span> b <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>消去<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2>交换两个数</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 377. Combination Sum IV</title>
      <link href="post/3581891594.html"/>
      <url>post/3581891594.html</url>
      
        <content type="html"><![CDATA[<p>给定一个正整数数组，找出所有可以相加得到目标正整数的组合</p><span id="more"></span><h2>Example:</h2><pre class="line-numbers language-none"><code class="language-none">给定数组:&#123;1,2,3&#125;目标数:4可能情况:    &#123;1,1,1,1&#125;    &#123;1,1,2&#125;,&#123;1,2,1&#125;,&#123;2,1,1&#125;    &#123;2,2&#125;    &#123;1,3&#125;,&#123;3,1&#125;组合数:7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2>解题思路</h2><p>设目标数 <code>i</code>  的组合数为 <code>dp[i]</code> ，可知 <code>dp[i] += dp[i] + dp[i-num]</code> ，例如本题计算 <code>dp[3]</code>  时，数组为 <code>&#123;1,2,3&#125;</code> ，因 <code>3</code>  可拆分为 <code>1+x</code> ，此时 <code>x</code>  则为 <code>dp[2]</code> ，也可拆为 <code>2+x</code> ，此时 <code>x</code>  则为 <code>dp[1]</code> ，因此， <code>dp[i]=dp[i-nums[0]] + dp[i-nums[1]] + dp[i-nums[2]].......dp[i-nums[nums.length-1]]</code> 。</p><h2>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">combinationSum4</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> target <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> num<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> num<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="post/794273428.html"/>
      <url>post/794273428.html</url>
      
        <content type="html"><![CDATA[<p>总结基本正则表达式</p><span id="more"></span><h2>例子</h2><ul><li>匹配手机号： <code>(\+\d&#123;2&#125;)?\s?\d&#123;3&#125;\-?\d&#123;4&#125;\-?\d&#123;4&#125;</code></li><li>匹配邮箱： <code>^[a-zA-Z0-9._%+\-]+@[a-zA-Z0-9.\-]+\.[a-zA-Z]&#123;1,6&#125;$</code></li></ul><p>(暂时没有啦)</p>]]></content>
      
      
      <categories>
          
          <category> 备用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>错题整理第一弹</title>
      <link href="post/284047414.html"/>
      <url>post/284047414.html</url>
      
        <content type="html"><![CDATA[<p>错题整理</p><span id="more"></span><h2>Linux</h2><ol class="options"><li class="quiz">下面有关文件系统元数据的描述，说法错误的是？ <span class="gap"></span> 。<ul class="options"><li>元数据指用来描述一个文件的特征的系统数据，诸如访问权限、文件拥有者以及文件数据块的分布信息等等</li><li>我们可以使用 stat 命令来查看文件更多的元数据信息</li><li>Unix/Linux 系统允许，多个文件名指向同一个 inode 号码</li><li class="correct">文件 A 和文件 B 的 inode 号码虽然不一样，但是文件 A 的内容是文件 B 的路径。读取文件 A 时，系统会自动将访问者导向文件 B，这是文件 A 就称为文件 B 的 &quot;硬链接&quot;</li></ul><blockquote><p>我们知道文件都有文件名与数据，这在 Linux 上被分成两个部分：用户数据 (user data) 与元数据 (metadata)。<br>用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方；而元数据则是文件的附加属性，如文件大小、创建时间、所有者等信息。<br>在 Linux 中，元数据中的 inode 号（inode 是文件元数据的一部分但其并不包含文件名，inode 号即索引节点号）才是文件的唯一标识而非文件名。<br>文件名仅是为了方便人们的记忆和使用，系统或程序通过 inode 号寻找正确的文件数据块。<br>硬链接 (hard link) 与软链接（又称符号链接，即 soft link 或 symbolic link）。<br>链接为 Linux 系统解决了文件的共享使用，还带来了隐藏文件路径、增加权限安全及节省存储等好处。<br>若一个 inode 号对应多个文件名，则称这些文件为硬链接。<br>换言之，硬链接就是同一个文件使用了多个别名。<br>若文件用户数据块中存放的内容是另一文件的路径名的指向，则该文件就是软链接。</p></blockquote></li></ol><h2>java</h2><ol><li class="quiz options"><p>what is the result of the following code?</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">AccountType</span><span class="token punctuation">&#123;</span>    SAVING<span class="token punctuation">,</span> FIXED<span class="token punctuation">,</span> CURRENT<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AccountType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“<span class="token class-name">It</span> is a account type”<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">EnumOne</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">AccountType</span><span class="token punctuation">.</span>FIXED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul class="options"><li>Compiles fine and output is prints&quot;It is a account type&quot;once followed by&quot;FIXED&quot;</li><li>Compiles fine and output is prints&quot;It is a account type&quot;twice followed by&quot;FIXED&quot;</li><li class="correct">Compiles fine and output is prints&quot;It is a account type&quot;thrice followed by&quot;FIXED&quot;</li><li>Compiles fine and output is prints&quot;It is a account type&quot;four times followed by&quot;FIXED&quot;</li><li>Compilation fails</li></ul><blockquote><p>创建枚举类型要使用 enum 关键字，隐含了所创建的类型都是 java.lang.Enum 类的子类（java.lang.Enum 是一个抽象类）。枚举类型符合通用模式 Class Enum<br> 而 E 表示枚举类型的名称。 <strong>枚举类型的每一个值都将映射到 protected Enum (String name, int ordinal) 构造函数中简单来说就是枚举类型中的枚举值都会对应调用一次构造函数</strong><br>本题中三个枚举值，    这里还要特别强调一下，枚举中的构造函数是私有类，也就是无法再外面创建 enum<br> 枚举值默认 static ，AccountType.FIXED 使用的是枚举值，没有创建。所以一共就 3 次。</e></p></blockquote></li><li class="quiz multi"><p>Which statement is true for the class java.util.ArrayList?</p><ul class="options"><li class="correct">The elements in the collection are ordered.</li><li>The collection is guaranteed to be immutable.</li><li>The elements in the collection are guaranteed to be unique.</li><li>The elements in the collection are accessed using a unique key.</li><li class="correct">下标可作为 unique key</li><li>The elements in the collections are guaranteed to be synchronized.</li></ul><blockquote><p>ArrayList 就是动态数组，用 MSDN 中的说法，就是 Array 的复杂版本，它提供了如下一些好处：</p><ul class="options"><li>动态的增加和减少元素</li><li>实现了 ICollection 和 IList 接口</li><li>灵活的设置数组的大小<br> Synchronized 属性指示当前的 ArrayList 实例是否支持线程同步，而 ArrayList.Synchronized 静态方法则会返回一个 ArrayList 的线程同步的封装。 如果使用非线程同步的实例，那么在多线程访问的时候，需要自己手动调用 lock 来保持线程同步</li></ul></blockquote></li><li class="quiz options"><p>关于 sleep () 和 wait ()，以下描述错误的一项是（<span class="gap"></span>）。</p><ul class="options"><li>sleep 是线程类（Thread）的方法，wait 是 Object 类的方法</li><li>sleep 不释放对象锁，wait 放弃对象锁</li><li>sleep 暂停线程、但监控状态仍然保持，结束后会自动恢复</li><li class="correct">wait 后进入等待锁定池，只有针对此对象发出 notify 方法后获得对象锁进入运行状态 (或 notifyAll ())</li></ul><blockquote><p>sleep 是线程类（Thread）的方法，执行此方法会导致当前此线程暂停指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用 sleep 不会释放对象锁。 wait 是 Object 类的方法，对此对象调用 wait 方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出 notify 方法或 notifyAll 后本线程才获得对象锁进入运行状态</p></blockquote></li><li class="quiz multi options"><p>在 Java 语言中，下列关于字符集编码（Character set encoding）和国际化（i18n）的问题，哪些是正确的？</p><ul class="options"><li>每个中文字符占用 2 个字节，每个英文字符占用 1 个字节</li><li>假设数据库中的字符是以 GBK 编码的，那么显示数据库数据的网页也必须是 GBK 编码的</li><li class="correct">Java 的 char 类型，以下 UTF-16 Big Endian 的方式保存一个字符</li><li class="correct">实现国际化应用常用的手段是利用 ResourceBundle 类</li></ul><blockquote><p>A 显然是错误的，Java 一律采用 Unicode 编码方式，每个字符无论中文还是英文字符都占用 2 个字节。<br>B 也是不正确的，不同的编码之间是可以转换的，通常流程如下： 将字符串 S 以其自身编码方式分解为字节数组，再将字节数组以你想要输出的编码方式重新编码为字符串。 例：String newUTF8Str = new String (oldGBKStr.getBytes (“GBK”), “UTF8”);<br>C 是正确的。Java 虚拟机中通常使用 UTF-16 的方式保存一个字符<br> D 也是正确的。ResourceBundle 能够依据 Local 的不同，选择性的读取与 Local 对应后缀的 properties 文件，以达到国际化的目的。</p></blockquote></li><li class="quiz"><p>下面函数将返回？</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> func <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul class="options"><li>1</li><li>2</li><li class="correct">3</li><li>编译错误</li></ul><blockquote><p>Try catch finally 获取异常错误的结构，try 中有两种情况：</p><ul class="options"><li>try 中没有异常时，但是有 return 等跳转语句，这样会引发程序控制流离开当前的 try, 自动完成 finally 中资源的释放。</li><li>try 中有异常时，catch 在获取到异常之前，进行 finally 执行，接着执行 catch 中的语句。<br>由于本题中的 finally 中有 return 语句，将 try 中的 return 语句覆盖，程序直接跳出。</li></ul></blockquote></li></ol><h2>javaEE</h2><ol class="options"><li class="quiz"><p>下面有关 jsp 中静态 include 和动态 include 的区别，说法错误的是？</p><ul class="options"><li>动态 INCLUDE: 用 jsp:include 动作实现</li><li>静态 INCLUDE: 用 include 伪码实现，定不会检查所含文件的变化，适用于包含静态页面 <code>&lt;%@ include file=&quot;included.htm&quot; %&gt;</code></li><li>静态 include 的结果是把其他 jsp 引入当前 jsp，两者合为一体；动态 include 的结构是两者独立，直到输出时才合并</li><li class="correct">静态 include 和动态 include 都可以允许变量同名的冲突。页面设置也可以借用主文件的</li></ul><blockquote><p>动态 INCLUDE 用 jsp:include 动作实现<br> <code>&lt;jsp:include page=&quot;included.jsp&quot; flush=&quot;true&quot;&gt;</code>  它总是会检查所含文件中的变化，适合用于包含动态页面，并且可以带参数。各个文件分别先编译，然后组合成一个文件。<br>静态 INCLUDE 用 include 伪码实现，定不会检查所含文件的变化，适用于包含静态页面  <code>&lt;%@ include file=&quot;included.htm&quot; %&gt;</code> ; 。先将文件的代码被原封不动地加入到了主页面从而合成一个文件，然后再进行翻译，此时不允许有相同的变量。<br>以下是对 include 两种用法的区别 ， 主要有两个方面的不同；<br> 一：执行时间上 :<br> <code>&lt;%@ include file=&quot;relativeURI&quot;&gt;</code>  是在翻译阶段执行<br> <code>&lt;jsp:include page=&quot;relativeURI&quot; flush=&quot;true&quot;&gt;</code>  在请求处理阶段执行 .<br> 二：引入内容的不同 :<br> <code>&lt;%@ include file=&quot;relativeURI&quot;&gt;</code>  引入静态文本 (html,jsp), 在 JSP 页面被转化成 servlet 之前和它融和到一起 .<br> <code>&lt;jsp:include page=&quot;relativeURI&quot; flush=&quot;true&quot;&gt;</code>  引入执行页面或 servlet 所生成的应答文本 .</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 纠错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven相关</title>
      <link href="post/3225280920.html"/>
      <url>post/3225280920.html</url>
      
        <content type="html"><![CDATA[<p>maven 用法记录</p><span id="more"></span><h2>maven 安装本地 jar 包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn install:install-file -Dfile<span class="token operator">=</span>jar包的位置 -DgroupId<span class="token operator">=</span>上面的groupId -DartifactId<span class="token operator">=</span>上面的artifactId -Dversion<span class="token operator">=</span>上面的version -Dpackaging<span class="token operator">=</span>jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行此命令可将制定 jar 包添加至本地 maven 仓库</p><h2>常用 maven 指令</h2><h3>compile</h3><p>需指定相应编译插件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;maven-compiler-plugin-version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>$&#123;语言等级&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>$&#123;语言等级&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>$&#123;字符集&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3>package</h3><h3>test</h3><h2>maven,tomcat 集成</h2><p>在 pom.xml 中添加响应 plugin</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 此处需制定tomcat版本 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token comment">&lt;!-- 注意此处的url,此处用户需要在tomcat conf目录下的tomcat-users.xml中添加manager-script角色 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://localhost:8080/manager/text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>$&#123;tomcat管理员&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>$&#123;口令&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>/$&#123;项目contextPath&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 此处的名字是项目发布的工程名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在项目目录下执行 <code>mvn tomcat7:deploy</code>  便可以自动编译打包部署运行，<strong>此处 tomcat 服务器必须在开启状态下</strong>，重新部署执行 <code>mvn tomcat7:redeploy</code> 。</p>]]></content>
      
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Hexo + GitHub 博客搭建</title>
      <link href="post/1520947630.html"/>
      <url>post/1520947630.html</url>
      
        <content type="html"><![CDATA[<p>本博客搭建过程</p><span id="more"></span><h2>首先先注册 Github 账号，这个不用多说</h2><h2>创建 Github 仓库</h2><blockquote><p>{giuhub 账户名}.github.io (* 注意此处的域名一定得是 Github 账户名，否则显示 404)</p></blockquote><p>![创建仓库](<a href="https://resource.frida.wang/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7">https://resource.frida.wang/ 屏幕快照</a> 2016-03-25 15.43.16.png)<br>![创建仓库](<a href="https://resource.frida.wang/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7">https://resource.frida.wang/ 屏幕快照</a> 2016-03-25 15.47.17.png)</p><h2>安装 NodeJS</h2><h3>Linux 下</h3><p>使用对应的包管理就可，如 Ubuntu 下 <code>apt-get install node</code></p><h3>windows 下</h3><p>去官网下载安装包直接安装</p><h3>OS X 下</h3><p>可以使用 homebrew 包管理 <code>brew install node</code> <br> 或者直接在官网下载安装包</p><h2>安装 Git</h2><h3>Linux 下</h3><p>使用对应的包管理就可，如 Ubuntu 下 <code>apt-get install git</code></p><h3>windows 下</h3><p>去官网下载安装包直接安装</p><h3>OS X 下</h3><p>可以使用 homebrew 包管理 <code>brew install git</code> <br> 或者直接在官网下载安装包</p><h2>配置 Git</h2>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"git服务器用户名"</span>$ <span class="token function">git</span> config --global user.email <span class="token string">"git服务器邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后不需要其他配置，<br>如果使用普通方法部署博客的话，需在 <code>public</code>  目录下执行 <code>git init</code> ，将此目录初始化为 git 本地仓库<br>然后使用</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote <span class="token function">add</span> origin 远程仓库地址$ <span class="token function">git</span> <span class="token function">add</span> *$ <span class="token function">git</span> commit -m <span class="token string">"init"</span>$ <span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将 <code>public</code>  中内容推送到 git 服务器中。</p><h2>安装 Hexo</h2>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g<span class="token function">npm</span> <span class="token function">install</span> hexo --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2>Hexo 初始化</h2>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init<span class="token comment">#安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</span>$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">npm</span> <span class="token function">install</span><span class="token comment">#新建完成后，指定文件夹的目录如下</span><span class="token builtin class-name">.</span>├── _config.yml├── package.json├── scaffolds├── scripts├── <span class="token builtin class-name">source</span><span class="token operator">|</span>      ├── _drafts<span class="token operator">|</span>      └── _posts└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2>安装 Hexo 插件</h2>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-index --save<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-archive --save<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-category --save<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-tag --save<span class="token function">npm</span> <span class="token function">install</span> hexo-server --save<span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-heroku --save<span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-rsync --save<span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-openshift --save<span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-marked@0.2 --save<span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-stylus@0.2 --save<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed@1 --save<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap@1 --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2>之后的工作</h2><p>使用 <code>hexo s</code>  或者 <code>hexo server</code>  开启本地服务器进行调试<br>使用 <code>hexo n &quot;文章名&quot;</code>  或者 <code>hexo new &quot;文章名&quot;</code>  惊醒文章书写，格式使用 markdown<br> 使用 <code>hexo g</code>  或者 <code>hexo generate</code>  进行构建，将 md 文件解释成 HTML</p><h2>部署 github</h2><p>普通方法为将 <code>Public</code>  目录里的直接 push 进 github 建立的仓库里<br>或者<br>编辑站点根目录下的 <code>_config.yml</code> ，添加</p>  <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> github仓库地址  <span class="token key atrule">branch</span><span class="token punctuation">:</span> 分支（以前版本强制要求gh<span class="token punctuation">-</span>pages分支，如今master分支亲测有效）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2>最后</h2><p>部署完成之后直接访问 <code>http://&#123;用户名&#125;.github.io</code>  即可访问搭建的博客，github 可能会有延迟，部署之后无论是否成功，github 都会发送一封通知邮件</p><h2>绑定自定义域名</h2><p>首先到域名提供商购买域名，一般一个 <code>.com</code>  域名价格在 <code>40~60</code>  左右，国内推荐<a href="https://wanwang.aliyun.com/">万网</a>，主要是域名备案比较快（国外域名提供商不知是否需要备案・・・・・・），域名买完之后解析<a href="http://baike.baidu.com/view/552919.htm"> CNAME</a> 记录到 <code>&#123;用户名&#125;.github.io.</code>  上，<strong>注意 <code>github.io</code>  后面的 <code>.</code>  很重要</strong>，同时在 hexo 博客根目录的 source 目录下添加一个名叫 <code>CNAME</code>  的文本文件，里面写上自定义域名，保存，部署，然后访问就可以了。</p><h2>Markdown 文本编辑器推荐</h2><ul><li><a href="https://atom.io/">Atom</a></li><li><a href="https://www.sublimetext.com/">Sublime Text3</a></li><li><a href="http://25.io/mou/">Mou</a></li><li><a href="https://www.typora.io/">Typora (Markdown 从此丝般润滑)</a></li><li><a href="https://caret.io/">Caret (基于 Electron)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
